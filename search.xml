<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>blender的学习</title>
    <url>/2025/04/05/blender%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>学习视频是<a href="https://www.bilibili.com/video/BV14u41147YH/?p=3&amp;share_source=copy_web&amp;vd_source=4ca6502fdd0fdc55a0f1f51bb8261e49">【【Kurt】Blender零基础入门教程 | Blender中文区新手必刷教程(已完结)】</a></p>
<h2 id="一、视图操作">一、视图操作</h2>
<ul>
<li><strong>数字键</strong>：
<ul>
<li>数字键 1（主键盘）：切换到前视图。</li>
<li>数字键 3（主键盘）：切换到侧视图。</li>
<li>数字键 7（主键盘）：切换到顶视图。</li>
<li>数字键 5（主键盘）：在正交视图和透视视图之间切换。</li>
</ul>
</li>
<li><strong>鼠标操作</strong>：
<ul>
<li>鼠标滚轮：放大或缩小视图。</li>
<li>按住鼠标中键并拖动：平移视图。</li>
<li>按住鼠标中键并按住Shift键拖动：旋转视图。</li>
</ul>
</li>
<li><strong>其他快捷键</strong>：
<ul>
<li>Numpad .：聚焦到选中的对象。</li>
<li>Shift + C：重置视图到默认的场景中心。</li>
</ul>
</li>
</ul>
<h2 id="二、选择操作">二、选择操作</h2>
<ul>
<li><strong>单个对象选择</strong>：
<ul>
<li>鼠标左键：在3D视图中选择对象。</li>
<li>Shift + 鼠标左键：添加或移除对象的选择。</li>
</ul>
</li>
<li><strong>多个对象选择</strong>：
<ul>
<li>Ctrl + 鼠标左键：框选多个对象。</li>
<li>B：框选工具，用鼠标拖动一个框来选择框内的对象。</li>
<li>C：圈选工具，用鼠标画圈来选择圈内的对象。</li>
</ul>
</li>
<li><strong>其他选择</strong>：
<ul>
<li>A：全选或取消全选。</li>
<li>Alt + 鼠标左键：选择边缘环（在编辑模式下，用于选择边缘环）。</li>
</ul>
</li>
</ul>
<h2 id="三、物体模式操作">三、物体模式操作</h2>
<ul>
<li><strong>移动、旋转和缩放</strong>：
<ul>
<li>G：移动物体。</li>
<li>R：旋转物体。</li>
<li>S：缩放物体。</li>
<li>在执行移动、旋转或缩放操作后，可以按X、Y或Z键来限制操作到特定的轴。</li>
</ul>
</li>
<li><strong>复制和删除</strong>：
<ul>
<li>Shift + D：复制选中的物体。</li>
<li>X：删除选中的物体。</li>
</ul>
</li>
<li><strong>其他操作</strong>：
<ul>
<li>Tab：在物体模式和编辑模式之间切换。</li>
<li>H：隐藏选中的物体。</li>
<li>Alt + H：显示所有隐藏的物体。</li>
</ul>
</li>
</ul>
<h2 id="四、编辑模式操作（以网格编辑为例）">四、编辑模式操作（以网格编辑为例）</h2>
<ul>
<li><strong>顶点、边和面的切换</strong>：
<ul>
<li>1（数字键区）：切换到顶点选择模式。</li>
<li>2（数字键区）：切换到边选择模式。</li>
<li>3（数字键区）：切换到面选择模式。</li>
</ul>
</li>
<li><strong>创建和删除</strong>：
<ul>
<li>F：创建新的面或边。</li>
<li>X：删除选中的顶点、边或面。</li>
</ul>
</li>
<li><strong>其他操作</strong>：
<ul>
<li>E：挤出选中的顶点、边或面。</li>
<li>Ctrl + R：添加循环边。</li>
<li>Ctrl + B：倒角操作。</li>
</ul>
</li>
</ul>
<h2 id="五、渲染和动画">五、渲染和动画</h2>
<ul>
<li><strong>渲染</strong>：
<ul>
<li>F12：渲染当前场景。</li>
<li>Shift + F12：渲染并保存当前场景。</li>
</ul>
</li>
<li><strong>动画</strong>：
<ul>
<li>I：插入关键帧。</li>
<li>Alt + A：在3D视图中播放动画。</li>
</ul>
</li>
</ul>
<h2 id="六、其他常用快捷键">六、其他常用快捷键</h2>
<ul>
<li>Ctrl + Z：撤销操作。</li>
<li>Ctrl + Shift + Z：重做操作。</li>
<li>Ctrl + S：保存文件。</li>
<li>Ctrl + O：打开文件。</li>
<li>Ctrl + N：重置场景。<br>
<img src="https://bu.dusays.com/2025/04/06/67f23a31d9c6e.png" alt></li>
</ul>
<h1>2025/4/6 学习内容</h1>
<p><img src="https://bu.dusays.com/2025/04/06/67f23ccb41f5b.png" alt="快捷键"><br>
案例一：<br>
参考图：<br>
<img src="https://bu.dusays.com/2025/04/06/67f23ef854ae8.png" alt="珍珠少女"></p>
<p>花费一个小时的成果：<br>
<img src="https://bu.dusays.com/2025/04/06/67f28ae149950.png" alt="自己做的"><br>
还是非常像的哈哈哈</p>
<p>渲染方式的优缺点<br>
渲染有 eexee和cycles两种内置的渲染器<br>
<img src="https://bu.dusays.com/2025/04/06/67f264075cc8e.png" alt></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>blender</tag>
        <tag>建模</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF入门第一章</title>
    <url>/2025/03/30/ctf%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="CTF-知识体系分类整理">CTF 知识体系分类整理</h2>
<h2 id="一、Web-安全">一、Web 安全</h2>
<p>【核心漏洞类型】</p>
<table>
<thead>
<tr>
<th>Web 安全核心漏洞类型</th>
<th>Web 安全核心漏洞类型</th>
<th>Web 安全核心漏洞类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>SQL 注入</td>
<td>XSS 跨站脚本</td>
<td>文件上传漏洞</td>
</tr>
<tr>
<td>文件包含漏洞</td>
<td>XXE XML 外部实体注入</td>
<td>SSRF 服务器端请求伪造</td>
</tr>
<tr>
<td>RCE 远程代码执行</td>
<td>代码审计技术</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="二、密码学">二、密码学</h2>
<p>【主要分支】</p>
<ul>
<li>编码技术</li>
<li>现代密码学</li>
<li>古典密码学</li>
</ul>
<h2 id="三、逆向工程">三、逆向工程</h2>
<table>
<thead>
<tr>
<th>核心技术</th>
<th>常见场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>可执行文件分析</td>
<td>算法破解获取 flag</td>
</tr>
<tr>
<td>ASM 汇编语言</td>
<td>反调试对抗</td>
</tr>
<tr>
<td>IDA Pro 工具使用</td>
<td>代码混淆处理</td>
</tr>
<tr>
<td>壳处理技术</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="四、二进制安全">四、二进制安全</h2>
<p>【核心方向】</p>
<ul>
<li>堆溢出漏洞</li>
<li>栈溢出漏洞</li>
<li>漏洞利用 exp 编写</li>
<li>安全保护机制绕过</li>
</ul>
<h2 id="五、杂项技术">五、杂项技术</h2>
<table>
<thead>
<tr>
<th>涵盖范围</th>
<th>涵盖范围</th>
<th>涵盖范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>隐写技术</td>
<td>信息收集</td>
<td>流量分析</td>
</tr>
<tr>
<td>压缩包处理</td>
<td>内存取证</td>
<td>其他未归类技术</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>【picoCTF】JAuth  J</title>
    <url>/2025/04/19/picoctfjauth--j/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="👀JAuth-J">👀JAuth  J</h3>
<p>题目截图：<br>
<img src="https://bu.dusays.com/2025/04/20/6804ac0036a4e.png" alt="JAuth  J"></p>
<h3 id="🤔思路：">🤔思路：</h3>
<p>参考大佬博客：<a href="https://mh4ck3r0n3.github.io/posts/2025/03/01/jauth/">🌐 JAuth - mH4ck3r0n3</a><br>
题目内容：</p>
<pre><code class="language-language">您能否识别组件并利用易受攻击的组件？
该网站在此处运行。你能成为 ？admin
您可以使用密码登录以开始使用。testTest123!
</code></pre>
<p>启动实例访问：</p>
<h4 id="第一步">@第一步</h4>
<p>访问网站看到的界面是这样的<br>
<img src="https://bu.dusays.com/2025/04/20/6804abc06d53a.png" alt="our bank"><br>
在题目中有提到<code>admin</code>，以及密码登录:<code>testTest123!</code></p>
<h4 id="第二步-尝试登录">@第二步 尝试登录</h4>
<p>用户:<code>test</code><br>
密码:<code>Test123!</code><br>
<img src="https://bu.dusays.com/2025/04/20/6804ad633a87e.png" alt><br>
登录成功！<br>
<img src="https://bu.dusays.com/2025/04/20/6804ad9d2e964.png" alt><br>
好吧被忽悠了，让我们在看看控制台有没有线索？<br>
在应用程序中能看到cookie有token令牌<br>
<img src="https://bu.dusays.com/2025/04/20/6804ae454c345.png" alt></p>
<p>尝试检查他是不是JWT，可以使用<a href="https://jwt.io/">JSON Web Tokens - jwt.io</a>工具进行确认。<br>
<img src="https://bu.dusays.com/2025/04/20/6804ae7f6d71c.png" alt><br>
是的，看起来能得到一些信息，可以尝试将角色从<strong>user</strong>提权到<strong>admin</strong>。</p>
<h3 id="🚩获得flag">🚩获得flag:</h3>
<p>####工具<br>
<a href="https://mh4ck3r0n3.github.io/resources/PicoGym/PicoGymExclusive/JAuth/exploit.py">mH4ck3r0n3的JAuth工具</a></p>
]]></content>
      <categories>
        <category>picoCTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础内容（文档结构与核心知识）</title>
    <url>/2025/03/27/htlm%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9-%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84%E3%80%81%E7%9F%A5%E8%AF%86%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="基本文档结构">基本文档结构</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;zh&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta name=&quot;keywords&quot; content=&quot;HTML教程,网页基础&quot;&gt;
    &lt;meta name=&quot;description&quot; content=&quot;HTML文档结构与核心知识点详解&quot;&gt;
    &lt;title&gt;HTML基础教程&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!-- 页面内容 --&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="核心组成部分">核心组成部分</h3>
<ol>
<li><strong>文档声明</strong><br>
<code>&lt;!DOCTYPE html&gt;</code> 声明HTML5文档类型</li>
<li><strong>根元素</strong><br>
<code>&lt;html&gt;</code> 标签包含整个文档内容</li>
<li><strong>头部区域</strong><br>
<code>&lt;head&gt;</code> 包含元数据和页面标题</li>
<li><strong>主体内容</strong><br>
<code>&lt;body&gt;</code> 包含所有可见内容</li>
</ol>
<h2 id="元数据配置">元数据配置</h2>
<h3 id="文件头和文件体">文件头和文件体</h3>
<ul>
<li><code>&lt;head&gt;</code> 文件头</li>
<li><code>&lt;/head&gt;</code> 文件尾</li>
<li><code>&lt;body&gt;</code> 文件体</li>
<li>主要内容</li>
<li><code>&lt;/body&gt;</code> 结束</li>
<li><code>&lt;/html&gt;</code></li>
</ul>
<h3 id="元数据">元数据</h3>
<ul>
<li><code>keyword</code>：向搜索引擎说明你的网页的关键词</li>
<li><code>description</code>：向搜索引擎描述网页内容的摘要信息</li>
</ul>
<h3 id="元数据配置-2">元数据配置</h3>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>charset</code></td>
<td>指定字符编码</td>
<td><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></td>
</tr>
<tr>
<td><code>name=&quot;keywords&quot;</code></td>
<td>搜索引擎关键词</td>
<td><code>&lt;meta name=&quot;keywords&quot; content=&quot;HTML,教程&quot;&gt;</code></td>
</tr>
<tr>
<td><code>name=&quot;description&quot;</code></td>
<td>页面描述</td>
<td><code>&lt;meta name=&quot;description&quot; content=&quot;HTML基础教程&quot;&gt;</code></td>
</tr>
<tr>
<td><code>name=&quot;viewport&quot;</code></td>
<td>移动端适配</td>
<td><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code></td>
</tr>
</tbody>
</table>
<pre><code class="language-html">&lt;!-- 典型元数据配置 --&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;网页开发,前端技术&quot;&gt;
&lt;meta name=&quot;description&quot; content=&quot;HTML文档结构详解教程&quot;&gt;
&lt;title&gt;页面标题&lt;/title&gt;
</code></pre>
<h3 id="HTML的属性">HTML的属性</h3>
<ul>
<li><code>lang</code>(语言)=“zh(中文)/en(英文)</li>
</ul>
<hr>
<h2 id="URL链接">URL链接</h2>
<h3 id="协议和域名">协议和域名</h3>
<ul>
<li><code>http</code>资源访问
<ul>
<li><code>https://www.xxxx.com/</code></li>
</ul>
</li>
<li><code>FTP</code>文件下载
<ul>
<li><code>ftp://ftp.xxxxx/文件夹/文件</code></li>
</ul>
</li>
<li><code>MAILTO</code>邮箱地址
<ul>
<li><code>mailto:xxxxxx@xx.com</code></li>
</ul>
</li>
</ul>
<hr>
<h2 id="文件路径">文件路径</h2>
<h3 id="相对路径">相对路径</h3>
<ul>
<li>相对当前文件寻找需要的文件的路径</li>
<li><code>&quot;..&quot;</code>：返回上一层寻找文件</li>
</ul>
<h3 id="绝对路径">绝对路径</h3>
<ul>
<li>从根目录下寻找需要的文件</li>
<li><code>&lt;主机+服务器+目录+文件名&gt;</code></li>
</ul>
<hr>
<h2 id="注释">注释</h2>
<ul>
<li>使用注释对一段html代码进行说明，方便在未来清楚的明白代码意图</li>
</ul>
<h2 id="图像格式">图像格式</h2>
<ul>
<li><code>jpeg(JPG)</code>：网页上更加实用，有损压缩，色彩丰富，较小</li>
<li><code>PNG</code>：无损压缩（同时支持有损，透明，交错，动画）</li>
<li><code>GIF</code>：简单动画，背景图片</li>
</ul>
<h3 id="img的使用">img的使用</h3>
<ul>
<li><code>&lt;img src=&quot;相对路径/绝对路径&quot; alt=&quot;图片名称&quot;(当图片无法正常显示时显示该文本)/&gt;</code></li>
</ul>
<h2 id="超链接的使用">超链接的使用</h2>
<ul>
<li><code>&lt;a href=&quot;链接((URL)/文件路径&quot;&gt;入口名称/图片等&lt;/a&gt;</code></li>
</ul>
<h3 id="属性">属性</h3>
<ul>
<li><code>target</code>：当值等于_blank时会在一个新窗口中打开</li>
<li><code>title</code>：提示性文本，当鼠标放在入口时会显示该段提示</li>
</ul>
<h2 id="锚点">锚点</h2>
<h3 id="定义">定义</h3>
<ul>
<li>跳跃到对应位置</li>
</ul>
<h3 id="属性-2">属性</h3>
<h4 id="局部属性">局部属性</h4>
<ul>
<li><code>download=''</code> 属性 用于a标签中(a标签必须有 href )</li>
</ul>
<h4 id="全局属性">全局属性</h4>
<ul>
<li><code>spellcheck='true/false'</code> 对可编辑元素(非密码)进行检查</li>
<li><code>contenteditable='true/false'</code> 使元素内容可编辑(p/div/…)
<ul>
<li><code>contenteditable=&quot;plaintext-only&quot;</code> 只能输入纯文本</li>
</ul>
</li>
<li><code>accesskey=&quot;key&quot;</code> 使元素获取焦点的快捷键(Alt+key/Alt+shift+key)</li>
<li><code>center</code> 标签自带居中样式。</li>
</ul>
<h3 id="文档声明">文档声明</h3>
<ul>
<li><code>DOCTYPE</code> 声明文档html格式</li>
<li><code>meta</code></li>
</ul>
<h3 id="背景">背景</h3>
<ul>
<li><code>background-attachment: fixed;</code></li>
</ul>
<h3 id="显示省略号">显示省略号</h3>
<ul>
<li><code>white-space: normal/nowrap</code>(文本不会换行)</li>
</ul>
<h2 id="二级菜单">二级菜单</h2>
<ul>
<li><code>&lt;ul&gt;</code>
<ul>
<li><code>&lt;li&gt;</code>
<ul>
<li><code>&lt;ul&gt;</code> 默认为none ,当鼠标移动到父级元素上时 ul改为block( li:hover)
<ul>
<li><code>&lt;li&gt;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="通栏和版心">通栏和版心</h2>
<ul>
<li>通栏:占全屏的元素</li>
<li>版心:两边会留空间的元素</li>
</ul>
<h3 id="设定一个类名作为版心">设定一个类名作为版心</h3>
<ul>
<li><code>outline</code> : 设置input元素默认互动(焦点)样式</li>
</ul>
<h2 id="布局区域标签-语义化">布局区域标签(语义化)</h2>
<ul>
<li>这些语义化标准主要是针对搜索引擎的</li>
<li>IE9中需要转换成块元素</li>
<li>移动端没有这些兼容性问题</li>
</ul>
<h3 id="标签">标签</h3>
<ul>
<li><code>&lt;header&gt;</code> 头部标签</li>
<li><code>&lt;nav&gt;</code> 导航栏</li>
<li><code>&lt;article&gt;</code> 标签规定独立的自包含内容(帖子，文章，评论)</li>
<li><code>&lt;section&gt;</code> 定义某个区域(大号的div)</li>
<li><code>&lt;aside&gt;</code> 侧边栏</li>
<li><code>&lt;footer&gt;</code> 尾部标签</li>
<li><code>&lt;figure&gt;</code> 标签规定独立的流内容（图像、图表、代码等等）
<ul>
<li><code>&lt;figcaption&gt;</code> 在figure 标签中设置标题</li>
</ul>
</li>
<li><code>&lt;label&gt;</code> 可以关联</li>
</ul>
<h2 id="多媒体标签">多媒体标签</h2>
<h3 id="视频播放">视频播放</h3>
<ul>
<li><code>&lt;video src='文件地址'&gt;</code> 视频播放,只支持 MP4,WetbM,Ogg</li>
<li>标签内容可以写 ‘您的浏览器不支持 video 标签’ ,当未正常播放的时候会显示。</li>
</ul>
<h3 id="属性-3">属性</h3>
<ul>
<li><code>autoplay = 'autoplay'</code> 视频自动播放(谷歌浏览器需要muted属性)</li>
<li><code>controls = &quot;controls&quot;</code> 显示播放控件(播放暂停进度条等…)</li>
<li><code>height/width</code> 设置播放器高宽</li>
<li><code>loop = 'loop'</code> 是否循环播放</li>
<li><code>preload = auto/none</code> 是否预加载视频</li>
<li><code>poster = imgurl(图片地址)</code> 加载等待的图片</li>
<li><code>muted = muted</code> 静音播放</li>
</ul>
<h3 id="音频播放">音频播放</h3>
<ul>
<li><code>&lt;audio src=''&gt;</code> 音频播放， 支持 MP3、Wav、Ogg 格式</li>
<li><code>autoplay = 'autoplay'</code> 视频自动播放（谷歌禁用此属性）</li>
<li><code>controls = &quot;controls&quot;</code> 显示播放控件(播放暂停进度条等…)</li>
<li><code>loop = 'loop'</code> 是否循环播放</li>
<li><code>src = URL(文件路径)</code></li>
</ul>
<h3 id="引入源文件">引入源文件</h3>
<ul>
<li><code>&lt;source src='' type='video/mp4[ogg/..]'&gt;</code> 在video/audio标签中，常用于引入源文件</li>
</ul>
<h2 id="表单">表单</h2>
<h3 id="选项列表-数据列表">选项列表(数据列表)</h3>
<ul>
<li>在文本框中输入数据，会弹出 datalist 中相关文本</li>
<li><code>&lt;input type='text' list='mylist'&gt;</code></li>
<li><code>&lt;datalist id='mylist'&gt;</code>
<ul>
<li><code>&lt;option value=''&gt;选项</code></li>
</ul>
</li>
</ul>
<h3 id="新增-input-类型">新增 input 类型</h3>
<ul>
<li><code>pattern</code> : 设为某个格式的正则表达式，提交时会检查内容是否符合。</li>
</ul>
<h3 id="type属性值">type属性值</h3>
<ul>
<li><code>email</code> 限制用户只能输入Email 类型  multiple 属性可以填写多个邮箱用 ‘,’ 隔开</li>
<li><code>url</code> 限制用户只能输入 URL 类型</li>
<li><code>date</code> 限制用户只能输入 日期 类型</li>
<li><code>time</code> 限制用户只能输入 时间 类型</li>
<li><code>month</code> 限制用户只能输入 月分 类型</li>
<li><code>week</code> 限制用户只能输入 周 类型</li>
<li><code>number</code> 限制用户只能输入 数字 类型</li>
<li><code>tel</code> 手机号码</li>
<li><code>search</code> 搜索框</li>
<li><code>color</code> 生成颜色选择器</li>
</ul>
<h3 id="注意">注意</h3>
<ul>
<li>验证内容是否符合通过添加 form 表单域后 点击按钮 验证</li>
</ul>
<h3 id="表单验证属性">表单验证属性</h3>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>required</code></td>
<td>必填字段</td>
<td><code>&lt;input required&gt;</code></td>
</tr>
<tr>
<td><code>pattern</code></td>
<td>正则验证</td>
<td><code>&lt;input pattern=&quot;\d+&quot;&gt;</code></td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>输入提示</td>
<td><code>&lt;input placeholder=&quot;请输入&quot;&gt;</code></td>
</tr>
<tr>
<td><code>min/max</code></td>
<td>数值范围</td>
<td><code>&lt;input type=&quot;number&quot; min=&quot;1&quot;&gt;</code></td>
</tr>
</tbody>
</table>
<pre><code class="language-html">&lt;!-- 带验证的登录表单示例 --&gt;
&lt;form&gt;
    &lt;input type=&quot;email&quot; 
           placeholder=&quot;请输入邮箱&quot;
           required
           pattern=&quot;[a-z0-9._%+-]+@[a-z0-9.-]+\.com&quot;&gt;
    &lt;input type=&quot;password&quot; minlength=&quot;6&quot; required&gt;
&lt;/form&gt;
</code></pre>
<h3 id="autofocus">autofocus</h3>
<ul>
<li><code>autofocus = 'autofocus'</code> 自动聚焦属性</li>
</ul>
<h3 id="autocomplete">autocomplete</h3>
<ul>
<li><code>autocomplete = 'off'/on</code> 当用户字段开始键入时，浏览器基于之前输入过的值，显示出在字段中填写的选项。需要放入表单且同时加上 name 属性。</li>
</ul>
<h3 id="multiple">multiple</h3>
<ul>
<li><code>multiple = 'multiple'</code> 可以多选文件提交 (type = ‘file’)</li>
</ul>
<h2 id="表格">表格</h2>
<h3 id="定义表格">定义表格</h3>
<ul>
<li><code>&lt;table&gt;</code>:定义表格</li>
<li><code>&lt;tr&gt;</code>:table标签的子标签，代表一列、</li>
<li><code>&lt;td&gt;</code>:tr标签的子标签，代表一个单元格</li>
</ul>
<h3 id="table属性">table属性</h3>
<ul>
<li><code>border</code>:边框粗细程度（属性值为数值）</li>
<li><code>cellspacing</code>:定义单元格的间距（属性值为数值）</li>
</ul>
<h3 id="td属性">td属性</h3>
<ul>
<li><code>colspan</code>:定义单元格的跨列大小（属性值为数值）</li>
<li><code>rowspan</code>:定义单元格的跨行大小（属性值为数值）</li>
</ul>
<h3 id="属性-4">属性</h3>
<ul>
<li><code>align</code>:属性值center，使文字或表格居中</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>python包的概念</title>
    <url>/2025/04/02/python%E5%8C%85%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="自定义pyothon包">自定义pyothon包</h2>
<ol>
<li>
<p>包的文件夹中需要包含__init__.py，才可以被其他python文件引用。</p>
<ul>
<li>什么是__init__.py文件?<br>
- 可以对包进行初始化，比如改变环境变量等等。<br>
- 管理包公共接口，比如在</li>
</ul>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>【picoCTF】Forbidden Paths 禁止路径</title>
    <url>/2025/04/20/%E3%80%90picoCTF%E3%80%91Forbidden%20Paths%20%E7%A6%81%E6%AD%A2%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="👀Forbidden-Paths-禁止路径">👀Forbidden Paths 禁止路径</h3>
<p>题目截图：</p>
<p><img src="https://bu.dusays.com/2025/04/19/68036608db4ff.png" alt="Forbidden Paths"></p>
<p>访问实例可以得到</p>
<p><img src="https://bu.dusays.com/2025/04/19/6803664e728bb.png" alt="Web eReader"></p>
<h3 id="🤔思路：">🤔思路：</h3>
<p>由题已经知道</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">网站文件位于 /usr/share/nginx/html/ 中，</span><br><span class="line"></span><br><span class="line">标志位于 /flag.txt 但该网站正在过滤绝对文件路径道网站文件位于 `/usr/share/nginx/html/` 中，</span><br><span class="line"></span><br><span class="line">标志位于 `/flag.txt` 但该网站正在过滤绝对文件路径。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>或许可以尝试使用相对路径，去读取，比如<code>../flag.txt</code></p>
<p>最后尝试：<code>../../../flag.txt</code></p>
<h3 id="🚩获得flag">🚩获得flag:</h3>
<p>尝试：<code>../../../flag.txt</code></p>
<p>flag:<code>picoCTF&#123;7h3_p47h_70_5ucc355_e5a6fcbc&#125;</code></p>
<p><img src="https://bu.dusays.com/2025/04/19/680367fb7609c.png" alt></p>
]]></content>
      <categories>
        <category>picoCTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的第一个项目！</title>
    <url>/2025/04/13/vue%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="知识回顾：">知识回顾：</h3>
<h4 id="vue项目结构说明：">vue项目结构说明：</h4>
<ul>
<li>App.vue : 应用的根组件，所有页面的容器</li>
<li>components : 存放可复用的组件</li>
<li>router : 路由配置，控制页面跳转</li>
<li>views : 存放页面级组件</li>
</ul>
<h3 id="第一步！了解vue页面的基本概念：">第一步！了解vue页面的基本概念：</h3>
<h4 id="基本三件套；script-template-style">基本三件套；script-template-style</h4>
<p>这种结构被称为“单文件组件”(SFC)</p>
<pre><code class="language-language">&lt;script setup&gt;
// 这里写 JavaScript 代码
// 比如：定义变量、函数、导入其他文件等
&lt;/script&gt;

&lt;template&gt;
&lt;!-- 这里写页面结构，类似 HTML --&gt;
&lt;!-- 就是用户看到的内容 --&gt;
&lt;/template&gt;

&lt;style&gt;
/* 这里写样式，就是 CSS */
/* 控制页面长什么样子 */
&lt;/style&gt;
</code></pre>
<h4 id="关于-script-setup-：">关于 script setup ：</h4>
<p>概念：是 Vue 3 引入的一种语法糖，基于 Composition API，使得代码更加简洁和易于理解。它允许我们在&lt;‘script’&gt;标签中直接使用 setup 函数的功能。</p>
<pre><code class="language-javascript">// 导入需要的东西，就像拿工具一样
import &#123; ref &#125; from 'vue'  
// ref 用来创建可以改变的变量
import &#123; useRouter &#125; from 'vue-router' 
// 用来实现页面跳转

// 创建变量
const count = ref(0)  // 这个值可以改变，改变时页面会自动更新
// 创建函数
const addCount = () =&gt; &#123;
  count.value = count.value + 1  // 改变值的方法
&#125;
</code></pre>
<p><strong><code>大致了解作用，用到再详解</code></strong><br>
解释：<br>
Q: 什么是ref?<br>
A: 参考<a href="https://cn.vuejs.org/api/">API 参考 | Vue.js</a></p>
<pre><code class="language-answer">- ref 的作用：
- 让数据变成&quot;响应式&quot;的
- 当数据改变时，页面会自动更新

- 举个生活例子：
- 没有 ref ：就像手动计分板，改变分数需要手动更新显示
- 使用 ref ：就像电子计分板，改变分数时显示会自动更新
</code></pre>
<p>Q：什么是’vue-router’<br>
A：这是vue-router官方提供的路由管理，可以更好地管理页面跳转和路由。具体学习在<a href="https://router.vuejs.org/zh/introduction.html">介绍 | Vue Router</a></p>
<hr>
<h3 id="第二步！开始来搭建页面吧！">第二步！开始来搭建页面吧！</h3>
<p>我想制作一个左右布局的页面，左侧是导航栏：<br>
那么，我就先在复用组件中创建一个导航栏/components/sidebar<br>
我使用的是<a href="https://element-plus.org/zh-CN/">Element Plus(组件官网)</a>组件。</p>
<pre><code class="language-html">
&lt;script setup&gt;
// 导入所需的 Vue 功能
import &#123; ref, inject &#125; from 'vue'  // 增加 inject 导入
import &#123; useRouter, useRoute &#125; from 'vue-router'  // 用于路由导航
import &#123; watch &#125; from 'vue'

// 导入 Element Plus 的图标组件
import &#123;
  HomeFilled,
  Document,
  Picture,
  Setting,
  Moon,
  Sunny
&#125; from '@element-plus/icons-vue'
// @element-plus/icons-vue 是 Element Plus 提供的图标库

&lt;/script&gt;

&lt;template&gt;
  &lt;el-menu
    class=&quot;sidebar-menu&quot;&gt;

    &lt;!-- 首页菜单项 --&gt;
    &lt;el-menu-item index=&quot;/&quot;&gt;
      &lt;el-icon&gt;&lt;HomeFilled /&gt;&lt;/el-icon&gt;
      &lt;template #title&gt;首页&lt;/template&gt;
    &lt;/el-menu-item&gt;

    &lt;!-- 文章管理菜单项 --&gt;
    &lt;el-menu-item index=&quot;/posts&quot;&gt;
      &lt;el-icon&gt;&lt;Document /&gt;&lt;/el-icon&gt;
      &lt;template #title&gt;文章管理&lt;/template&gt;
    &lt;/el-menu-item&gt;

    &lt;!-- 图片管理菜单项 --&gt;
    &lt;el-menu-item index=&quot;/images&quot;&gt;
      &lt;el-icon&gt;&lt;Picture /&gt;&lt;/el-icon&gt;
      &lt;template #title&gt;图片管理&lt;/template&gt;
    &lt;/el-menu-item&gt;
    
    &lt;!-- 设置菜单项 --&gt;
    &lt;el-menu-item index=&quot;/settings&quot;&gt;
      &lt;el-icon&gt;&lt;Setting /&gt;&lt;/el-icon&gt;
      &lt;template #title&gt;设置&lt;/template&gt;
    &lt;/el-menu-item&gt;
  &lt;/el-menu&gt;
&lt;/template&gt;

&lt;style scoped&gt;
.sidebar-menu &#123;
  height: 100vh;
  border-right: none;
  transition: all 0.3s;
&#125;

.sidebar-menu:not(.el-menu--collapse) &#123;
  width: 200px;
&#125;

.logo &#123;
  height: 60px;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 10px 0;
  border-bottom: 1px solid #f2f2f2;
  transition: all 0.3s;
&#125;

.logo-small &#123;
  height: 30px;
  transition: all 0.3s;
&#125;

.el-menu-item &#123;
  border-left: 3px solid transparent;
&#125;

.el-menu-item.is-active &#123;
  background-color: var(--el-menu-hover-bg-color);
  border-left: 3px solid var(--el-menu-active-color);
&#125;

.el-menu-item:hover &#123;
  background-color: var(--el-menu-hover-bg-color);
&#125;

.theme-switch &#123;
  position: absolute;
  bottom: 20px;
  left: 0;
  right: 0;
  padding: 0 20px;
  transition: all 0.3s;
&#125;

.theme-switch.collapsed &#123;
  padding: 0 20px;
  display: flex;
  justify-content: center;
&#125;

.theme-switch.dark &#123;
  color: #e5e7eb;
&#125;

.switch-btn &#123;
  display: flex;
  align-items: center;
  cursor: pointer;
  padding: 10px;
  border-radius: 6px;
  transition: all 0.3s;
&#125;

.switch-btn:hover &#123;
  background-color: var(--el-menu-hover-bg-color);
&#125;

.switch-btn .el-icon &#123;
  margin-right: 10px;
  font-size: 18px;
&#125;

.theme-switch.collapsed .switch-btn .el-icon &#123;
  margin-right: 0;
&#125;
&lt;/style&gt;
</code></pre>
<p>然后引入到APP.vue中：</p>
<pre><code class="language-html">&lt;script setup&gt;
import Sidebar from './components/Sidebar.vue';
&lt;!-- 导入sidebar组件 --&gt;
import './style.css'
import &#123; ref, onMounted, onUnmounted &#125; from 'vue'
&lt;/script&gt;

&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;
    &lt;el-container class=&quot;container&quot;&gt;
      &lt;!-- 侧边栏 --&gt;
      &lt;el-aside :width=&quot;isCollapse ? '64px' : '200px'&quot; class=&quot;aside-container&quot;&gt;
        &lt;Sidebar :is-collapse=&quot;isCollapse&quot; @toggle-collapse=&quot;isCollapse = !isCollapse&quot; /&gt;
      &lt;/el-aside&gt;
      
      &lt;!-- 主内容区 --&gt;
      &lt;el-container class=&quot;main-container&quot;&gt;
        &lt;el-main&gt;
          &lt;router-view&gt;&lt;/router-view&gt;
        &lt;/el-main&gt;
      &lt;/el-container&gt;
    &lt;/el-container&gt;
  &lt;/div&gt;
&lt;/template&gt;
&lt;style&gt;
&lt;/style&gt;
</code></pre>
]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>关于博客</title>
    <url>/2025/03/27/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>##hexo文件构造<br>
在博客的根目录下以下文件夹，以及他们对应的作用：<br>
public ：这个是博客装换成静态页面所存储的文件夹<br>
source : 这个是博客的数据存放位置，存放着文章，页面信息等内容</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>前端JS：关于DOM元素</title>
    <url>/2025/03/27/%E5%89%8D%E7%AB%AFJS%EF%BC%9A%E5%85%B3%E4%BA%8EDOM%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="核心概念">核心概念</h2>
<h3 id="元素-Element-vs-节点-Node">元素(Element) vs 节点(Node)</h3>
<ul>
<li>
<p>元素：HTML文档中的具体标签（如 <code>&lt;div&gt;</code> <code>&lt;button&gt;</code>）</p>
</li>
<li>
<p>节点：文档中的所有组成部分（包括元素、文本、注释等）</p>
</li>
<li>
<p>关系：元素是节点的一种特殊类型</p>
</li>
</ul>
<h3 id="常用DOM操作">常用DOM操作</h3>
<ol>
<li>
<p><strong>禁用元素</strong>：<code>element.disabled = true</code> 适用于表单元素</p>
</li>
<li>
<p><strong>内容操作</strong>：<code>innerHTML</code> / <code>textContent</code></p>
</li>
<li>
<p><strong>样式控制</strong>：<code>style.property</code> / <code>classList</code></p>
</li>
<li>
<p><strong>事件处理</strong>：<code>addEventListener</code></p>
</li>
</ol>
<h2 id="实战案例">实战案例</h2>
<h3 id="案例1：动态表格生成">案例1：动态表格生成</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建表格骨架</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> table = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;table&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 批量生成数据行</span></span><br><span class="line"></span><br><span class="line">users.<span class="title function_">forEach</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> row = table.<span class="title function_">insertRow</span>();</span><br><span class="line"></span><br><span class="line">  row.<span class="property">innerHTML</span> = <span class="string">`&lt;td&gt;<span class="subst">$&#123;user.name&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">$&#123;user.age&#125;</span>&lt;/td&gt;`</span>;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 添加到页面</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(table);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="案例2：颜色切换器">案例2：颜色切换器</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;color-picker&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-color</span>=<span class="string">&quot;#ff0000&quot;</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-color</span>=<span class="string">&quot;#00ff00&quot;</span>&gt;</span>绿色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">btn</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = btn.<span class="property">dataset</span>.<span class="property">color</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="常见问题">常见问题</h2>
<ol>
<li>
<p><strong>元素找不到</strong>：检查选择器拼写/元素加载时机</p>
</li>
<li>
<p><strong>事件不触发</strong>：确认元素已渲染后再绑定事件</p>
</li>
<li>
<p><strong>样式不生效</strong>：优先使用class操作代替直接style修改</p>
</li>
</ol>
<h2 id="进阶练习">进阶练习</h2>
<p>| 练习项目 | 关键技能 | 实现思路 |</p>
<p>|---------|---------|---------|</p>
<p>| 留言板 | 节点创建/事件委托 | 1. 获取输入 2. 创建元素 3. 添加删除功能 |</p>
<p>| 全选功能 | 属性批量操作 | 1. 获取所有复选框 2. 联动全选状态 |</p>
<p>| 分类筛选 | 数据过滤/显示控制 | 1. 数据分类 2. 显示切换动画 |</p>
<p>流程图示例（全选功能）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">flowchart TD</span><br><span class="line"></span><br><span class="line">    A[点击全选按钮] --&gt; B&#123;全选状态&#125;</span><br><span class="line"></span><br><span class="line">    B --&gt;|true| C[设置所有checkbox.checked=true]</span><br><span class="line"></span><br><span class="line">    B --&gt;|false| D[设置所有checkbox.checked=false]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>对象.disabled = true 禁用按钮/搜索框</p>
<h2 id="循环方法对比">循环方法对比</h2>
<h3 id="基本用法">基本用法</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// forEach写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(alert);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统for循环写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>, length = arr.<span class="property">length</span>; k &lt; length; k++) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">alert</span>(arr[k]); <span class="comment">// 注意变量名一致性</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="ForEach参数解析">ForEach参数解析</h3>
<p>| 参数位置 | 说明                  | 类型       |</p>
<p>|---------|---------------------|-----------|</p>
<p>| 第1个参数 | 当前遍历的数组元素         | any       |</p>
<p>| 第2个参数 | 当前元素的索引（从0开始）   | number    |</p>
<p>| 第3个参数 | 正在遍历的数组本身        | Array     |</p>
<h3 id="运行示例">运行示例</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> letters = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"></span><br><span class="line">letters.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item, index, array);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出结果：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">a 0 [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">b 1 [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">c 2 [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">d 3 [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">d <span class="number">3</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## <span class="variable constant_">DOM</span> 文档模型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 核心概念</span><br><span class="line"></span><br><span class="line">- **文档(<span class="title class_">Document</span>)**：整个页面的根节点，通过 <span class="string">`document`</span> 对象访问</span><br><span class="line"></span><br><span class="line">- **元素(<span class="title class_">Element</span>)**：<span class="variable constant_">HTML</span> 标签对应的对象（如 <span class="string">`&lt;div&gt;`</span>、<span class="string">`&lt;p&gt;`</span>）</span><br><span class="line"></span><br><span class="line">- **节点(<span class="title class_">Node</span>)**：文档中的所有组成部分（包括元素、文本、注释等）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 元素获取方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| 方法名                  | 返回类型       | 使用场景               |</span><br><span class="line"></span><br><span class="line">|-------------------------|----------------|------------------------|</span><br><span class="line"></span><br><span class="line">| <span class="string">`getElementById()`</span>      | 单个元素对象   | 精确查找唯一元素       |</span><br><span class="line"></span><br><span class="line">| <span class="string">`getElementsByTagName()`</span> | <span class="variable constant_">HTML</span>集合       | 批量操作同类型元素     |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 通过ID获取单个元素</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const header = document.getElementById(&#x27;mainHeader&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 通过标签名获取所有段落</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const paragraphs = document.getElementsByTagName(&#x27;p&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<h3 id="注意事项">注意事项</h3>
<ol>
<li>
<p><strong>加载顺序</strong>：脚本应放在<body>底部或使用DOMContentLoaded事件</body></p>
</li>
<li>
<p><strong>方法规范</strong>：注意方法名大小写（如<code>getElementById</code>的最后一个’d’小写）</p>
</li>
<li>
<p><strong>返回类型</strong>：</p>
<ul>
<li>
<p><code>null</code> 表示元素未找到</p>
</li>
<li>
<p>集合需通过索引访问具体元素（如<code>paragraphs[0]</code>）</p>
</li>
</ul>
</li>
</ol>
<h3 id="调试技巧">调试技巧</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 查看元素详细信息</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(header);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出示例：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">HTMLHeadingElement &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  id: &#x27;mainHeader&#x27;,</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  classList: DOMTokenList [ ],</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  ...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>document.getElementsbyTageName(div[1])返回第二个元素值</p>
<p>获取父元素中的子元素：</p>
<p>1-可以给父元素定ID，在父元素中查找元素(</p>
<p>这是html中的元素<code>&lt;ul id=&quot;a&quot;&gt;   </code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> ul=<span class="variable language_">document</span>.<span class="title function_">getElementByid</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( ul.<span class="title function_">getElementsByTageName</span>(<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ul=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ul[<span class="number">0</span>].<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过类名获取元素（HTML5）</p>
<p><code>document.getElmentsByClassName('box');</code></p>
<p>指定选择器的第一个元素对象（选择器需要加符号申明）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">document.querySelector(&#x27;.box&#x27;)//获取第一个类选择器,也可获取第一个标签选择器</span><br><span class="line"></span><br><span class="line">//所有元素对象</span><br><span class="line"></span><br><span class="line">document.querySelectorAll(&#x27;.box&#x27;)//获取第所有类选择器</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>获取body元素</p>
<p><code>document.body;</code></p>
<p>获取html元素</p>
<p><code>document.documentElement;</code></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>初识vue</title>
    <url>/2025/04/13/%E5%88%9D%E8%AF%86vue/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="如何构建-Vue-项目">如何构建 Vue 项目</h3>
<h4 id="使用-Vite-脚手架构建-Vue-项目">使用 Vite 脚手架构建 Vue 项目</h4>
<p><code>npm create vite@latest frontend -- --template vue</code></p>
<p><strong>参数说明：</strong></p>
<ul>
<li>
<p>npm create：使用 npm 创建新项目。</p>
</li>
<li>
<p>vite@latest：使用最新版本的 Vite 脚手架。</p>
</li>
<li>
<p>frontend：项目名称，将在当前目录创建一个名为 frontend 的文件夹。</p>
</li>
<li>
<p>--template vue：使用 Vue 模板创建项目。</p>
</li>
</ul>
<h4 id="项目结构">项目结构</h4>
<p>创建后会生成一个名为 frontend 的文件夹，用于存放前端内容。以下是 frontend 文件夹下的常见文件和文件夹及其作用：</p>
<ul>
<li>
<p><strong>/src</strong>：项目的核心源代码目录。</p>
<ul>
<li>
<p><strong>/src/assets</strong>：存放静态资源，如图片、样式文件等。</p>
</li>
<li>
<p><strong>/src/components</strong>：存放可复用的 Vue 组件。</p>
</li>
<li>
<p><strong>/src/views</strong>：存放页面级的 Vue 组件，通常对应路由。</p>
</li>
<li>
<p><strong>/src/router</strong>：存放路由配置文件，用于管理页面跳转。</p>
</li>
<li>
<p><strong>/src/store</strong>：存放 Vuex 状态管理相关代码（如果使用 Vuex）。</p>
</li>
<li>
<p><strong>/src/main.js</strong>：项目的入口文件，用于初始化 Vue 应用。</p>
</li>
<li>
<p><strong>/src/App.vue</strong>：项目的根组件，包含全局布局和样式。</p>
</li>
</ul>
</li>
<li>
<p><strong>/public</strong>：存放公共资源，如 favicon、静态 HTML 文件等。这些文件会被直接复制到构建后的输出目录。</p>
</li>
<li>
<p><strong>/node_modules</strong>：存放项目依赖的第三方模块。此文件夹由 npm install 命令自动生成，通常不需要手动修改。</p>
</li>
<li>
<p><strong>/dist</strong>：项目构建后的输出目录。运行构建命令（如 npm run build）后，生成的静态资源会存放在这个文件夹中，用于部署到服务器。</p>
</li>
<li>
<p><strong>index.html</strong>：Vue 的入口页面，位于项目根目录。它是项目的模板文件，Vite 会根据此文件生成最终的 HTML 文件。</p>
</li>
</ul>
<h4 id="安装依赖">安装依赖</h4>
<p>运行以下命令安装项目依赖：</p>
<p><code>npm install</code></p>
<h3 id="运行检查">运行检查</h3>
<p>运行代码确定可以运行</p>
<p><code>npm run dev</code></p>
<h4 id="构建后的目录结构示例">构建后的目录结构示例</h4>
<p><img src="https://bu.dusays.com/2025/04/13/67fb781fe3155.png" alt="构建后"></p>
<h3 id="安装推荐依赖">安装推荐依赖</h3>
<h4 id="1-功能性依赖">1. 功能性依赖</h4>
<ul>
<li>
<p><strong>vue-router</strong>：Vue 官方的路由管理器，用于实现页面导航和路由控制，支持路由嵌套、参数传递等功能。</p>
</li>
<li>
<p><strong>pinia</strong>：Vue 官方推荐的状态管理库，用于管理全局状态，比 Vuex 更轻量和简单。</p>
</li>
<li>
<p><strong>axios</strong>：流行的 HTTP 客户端，用于与后端 API 进行通信，支持请求拦截、响应处理等功能。</p>
</li>
<li>
<p><strong>element-plus</strong>：Vue 3 的 UI 组件库，提供丰富的预制组件，支持主题定制。</p>
</li>
<li>
<p><strong>@element-plus/icons-vue</strong>：Element Plus 的图标库，提供常用的图标组件。</p>
</li>
</ul>
<p>安装命令：</p>
<p><code>npm install vue-router pinia axios element-plus @element-plus/icons-vue</code></p>
<h4 id="2-开发工具依赖">2. 开发工具依赖</h4>
<ul>
<li>
<p><strong>sass</strong>：CSS 预处理器，用于编写更灵活的样式代码。</p>
</li>
<li>
<p><strong>unplugin-auto-import</strong>：自动导入 API，减少手动导入的繁琐操作。</p>
</li>
<li>
<p><strong>unplugin-vue-components</strong>：自动导入组件，提升开发效率。</p>
</li>
</ul>
<p>安装命令：</p>
<p><code>npm install -D sass unplugin-auto-import unplugin-vue-components</code></p>
<h4 id="3-功能增强依赖">3. 功能增强依赖</h4>
<ul>
<li>
<p><strong>dayjs</strong>：轻量级的日期处理库，用于格式化、解析和操作日期。</p>
</li>
<li>
<p><strong>lodash-es</strong>：工具函数库，提供丰富的函数用于数组、对象等操作。</p>
</li>
<li>
<p><strong>js-cookie</strong>：用于处理浏览器 Cookie 的库。</p>
</li>
<li>
<p><strong>nprogress</strong>：页面加载进度条库，用于增强用户体验。</p>
</li>
</ul>
<p>安装命令：</p>
<p><code>npm install dayjs lodash-es js-cookie nprogress</code></p>
<hr>
<h3 id="开始开发页面">开始开发页面</h3>
<p>安装完依赖后，就可以开发页面啦！以下是开发过程中的一些常见步骤：</p>
<ol>
<li>
<p><strong>配置路由</strong>： 在 /src/router/index.js 中配置页面路由，使用 vue-router 定义页面路径和对应的组件。</p>
</li>
<li>
<p><strong>管理状态</strong>： 在 /src/store 中使用 pinia 创建和管理全局状态，方便组件间共享数据。</p>
</li>
<li>
<p><strong>使用 UI 组件库</strong>： 导入 element-plus 组件库，使用其提供的预制组件快速构建页面。</p>
</li>
<li>
<p><strong>开发组件</strong>： 在 /src/components 中创建可复用的 Vue 组件，提升代码复用性。</p>
</li>
<li>
<p><strong>页面开发</strong>： 在 /src/views 中开发页面级组件，结合路由实现页面跳转。</p>
</li>
<li>
<p><strong>样式开发</strong>： 使用 sass 编写样式文件，存放在 /src/assets 中，统一管理项目样式。</p>
</li>
<li>
<p><strong>API 请求</strong>： 使用 axios 与后端 API 进行通信，处理数据请求和响应。</p>
</li>
<li>
<p><strong>工具函数</strong>： 使用 lodash-es 提供的工具函数简化代码逻辑。</p>
</li>
<li>
<p><strong>日期处理</strong>： 使用 dayjs 处理日期相关的逻辑，如格式化、计算等。</p>
</li>
<li>
<p><strong>用户体验优化</strong>： 使用 nprogress 添加页面加载进度条，提升用户体验。</p>
</li>
</ol>
<h4 id="打包vue项目：">打包vue项目：</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这会将vue项目打包成静态资源，也可以使用electron打包成桌面程序</p>
]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>碎碎念</title>
    <url>/2025/03/28/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://bu.dusays.com/2025/03/29/67e7f9567accd.jpg" alt></p>
<p>图片镜像服务<br>
可以提取一些图片使用</p>
<pre><code class="language-网址">https://image.baidu.com/search/down?url=
</code></pre>
<pre><code class="language-网址">https://img.noobzone.ru/getimg.php?url=
</code></pre>
<pre><code class="language-网址">https://images.weserv.nl/?url=
</code></pre>
<pre><code class="language-网址">https://collect34.longsunhd.com/source/plugin/yzs1013_pldr/getimg.php?url=
</code></pre>
<pre><code class="language-网址">https://pic1.xuehuaimg.com/proxy/
</code></pre>
<pre><code class="language-网址">https://search.pstatic.net/common?src=
</code></pre>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
</search>
